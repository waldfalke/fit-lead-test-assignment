#!/usr/bin/env node
/**
 * Simple tokens -> globals.css generator (minimal)
 * - Reads design-tokens/tokens.json
 * - Writes app/globals.generated.css with @theme inline { ... } block
 *
 * Usage:
 *   node scripts/generate-tokens.js         # generates app/globals.generated.css
 *   node scripts/generate-tokens.js --apply # also writes app/globals.css (overwrites) - use with caution
 *
 * Note: this is a minimal helper for the test assignment. Production use requires Style Dictionary.
 */
const fs = require('fs');
const path = require('path');

const BASE = path.resolve(__dirname, '..');
const TOKENS_PATH = path.join(BASE, 'design-tokens', 'tokens.json');
const OUT_PATH = path.join(BASE, 'app', 'globals.generated.css');
const APPLY = process.argv.includes('--apply');

function die(msg){ console.error(msg); process.exit(1); }

if(!fs.existsSync(TOKENS_PATH)){
  die('tokens.json not found at ' + TOKENS_PATH);
}

const tokens = JSON.parse(fs.readFileSync(TOKENS_PATH, 'utf8'));

// Base font size for px → rem conversion
const BASE_FONT_SIZE = 16;

// Transform value based on type and unit
function v(obj) {
  if (!obj || typeof obj !== 'object') return String(obj);
  
  const { value, type, unit } = obj;
  
  // Handle dimension tokens with px unit → convert to rem
  if (type === 'dimension' && unit === 'px') {
    if (value === 0) return '0';
    // Keep very large values (like 9999px for border-radius: full) as px
    if (value >= 9999) return `${value}px`;
    return `${value / BASE_FONT_SIZE}rem`;
  }
  
  // Handle number tokens with em unit → keep as em
  if (type === 'number' && unit === 'em') {
    return `${value}em`;
  }
  
  // Handle fontWeight → keep as number
  if (type === 'fontWeight') {
    return value;
  }
  
  // Handle number → keep as is
  if (type === 'number') {
    return value;
  }
  
  // Default: return value as is
  return value;
}

let css = [];
css.push('/**');
css.push(' * GENERATED: globals.generated.css');
css.push(' * Source: design-tokens/tokens.json');
css.push(' * WARNING: This file is generated. Do not edit directly.');
css.push(' */\n');

css.push('/* stylelint-disable-next-line at-rule-no-unknown */');
css.push('@theme inline {');
css.push('  /* Colors */');
Object.keys(tokens.color||{}).forEach(k=>{
  css.push(`  --color-${k}: ${v(tokens.color[k])};` );
});
css.push('\n  /* Spacing */');
Object.keys(tokens.spacing||{}).forEach(k=>{
  css.push(`  --spacing-${k}: ${v(tokens.spacing[k])};` );
});
css.push('\n  /* Radius */');
Object.keys(tokens.radius||{}).forEach(k=>{
  css.push(`  --radius-${k}: ${v(tokens.radius[k])};` );
});
css.push('\n  /* Typography */');
Object.keys(tokens.typography||{}).forEach(k=>{
  css.push(`  --${k}: ${v(tokens.typography[k])};` );
});
css.push('\n  /* Shadows */');
Object.keys(tokens.shadow||{}).forEach(k=>{
  css.push(`  --shadow-${k}: ${v(tokens.shadow[k])};` );
});
css.push('\n  /* Breakpoints */');
Object.keys(tokens.breakpoints||{}).forEach(k=>{
  const token = tokens.breakpoints[k];
  // Breakpoints should stay in px for media queries
  const value = token.value ? `${token.value}px` : token;
  css.push(`  --breakpoint-${k}: ${value};` );
});
css.push('\n  /* Z-Index */');
Object.keys(tokens.zIndex||{}).forEach(k=>{
  css.push(`  --z-${k}: ${v(tokens.zIndex[k])};` );
});
css.push('\n  /* Transitions */');
Object.keys(tokens.transitions||{}).forEach(k=>{
  css.push(`  --transition-${k}: ${v(tokens.transitions[k])};` );
});
css.push('\n  /* Effects */');
Object.keys(tokens.effects||{}).forEach(k=>{
  css.push(`  --${k}: ${v(tokens.effects[k])};` );
});
css.push('\n  /* Gradient */');
Object.keys(tokens.gradient||{}).forEach(k=>{
  css.push(`  --gradient-${k}: ${v(tokens.gradient[k])};` );
});
css.push('\n  /* Animation */');
Object.keys(tokens.animation||{}).forEach(k=>{
  css.push(`  --animation-${k}: ${v(tokens.animation[k])};` );
});
css.push('}\n');
const out = css.join('\n') + '\n';
fs.writeFileSync(OUT_PATH, out, 'utf8');
console.log('Wrote', OUT_PATH);
if(APPLY){
  const LIVE = path.join(BASE, 'app', 'globals.css');
  fs.writeFileSync(LIVE, '/* WARNING: autogenerated - review tokens.json before edit */\n' + out, 'utf8');
  console.log('Also wrote', LIVE);
}
